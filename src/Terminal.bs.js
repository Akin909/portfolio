// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Shell$Portfolio = require("./Shell.bs.js");
var Utils$Portfolio = require("./Utils.bs.js");
var CommonStyles$Portfolio = require("./CommonStyles.bs.js");

var container = Css.style(/* :: */[
      Css.height(/* `percent */[
            -119887163,
            40
          ]),
      /* :: */[
        Css.width(/* `percent */[
              -119887163,
              50
            ]),
        /* :: */[
          Css.margin(Css.em(1)),
          /* [] */0
        ]
      ]
    ]);

var header = Css.style(/* :: */[
      Css.width(/* `percent */[
            -119887163,
            100
          ]),
      /* :: */[
        Css.height(Css.em(1)),
        /* :: */[
          Css.textAlign(Css.center),
          /* :: */[
            Css.paddingTop(Css.em(0.5)),
            /* :: */[
              Css.paddingBottom(Css.em(0.5)),
              /* :: */[
                Css.color(Css.black),
                /* :: */[
                  Css.backgroundColor(Css.whitesmoke),
                  /* :: */[
                    Css.borderTopLeftRadius(Css.px(5)),
                    /* :: */[
                      Css.borderTopRightRadius(Css.px(5)),
                      /* :: */[
                        Css.position(Css.relative),
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

var content = Css.style(/* :: */[
      Css.width(/* `percent */[
            -119887163,
            100
          ]),
      /* :: */[
        Css.backgroundColor(Css.purple),
        /* :: */[
          Css.height(/* `percent */[
                -119887163,
                100
              ]),
          /* :: */[
            Css.borderBottomLeftRadius(Css.px(5)),
            /* :: */[
              Css.borderBottomRightRadius(Css.px(5)),
              /* :: */[
                Css.padding(Css.em(1.0)),
                /* :: */[
                  Css.boxSizing(Css.borderBox),
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

var buttonContainer = Css.style(/* :: */[
      Css.left(Css.zero),
      /* :: */[
        Css.position(Css.absolute),
        /* [] */0
      ]
    ]);

var buttons = Css.style(/* :: */[
      Css.height(Css.em(1.5)),
      /* :: */[
        Css.width(Css.em(1.5)),
        /* :: */[
          Css.borderRadius(/* `percent */[
                -119887163,
                50
              ]),
          /* :: */[
            Css.border(Css.px(1), Css.solid, Css.hex("000")),
            /* :: */[
              Css.position(Css.relative),
              /* :: */[
                Css.top(Css.em(0.5)),
                /* :: */[
                  Css.left(Css.em(1)),
                  /* :: */[
                    Css.marginRight(Css.em(0.5)),
                    /* :: */[
                      Css.backgroundColor(Css.hex("ff3b47")),
                      /* :: */[
                        Css.borderColor(Css.hex("9d252b")),
                        /* :: */[
                          Css.display(Css.inlineBlock),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

var minimize = Css.style(/* :: */[
      Css.left(Css.em(2)),
      /* :: */[
        Css.backgroundColor(Css.hex("ffc100")),
        /* :: */[
          Css.borderColor(Css.hex("9d802c")),
          /* :: */[
            Css.color(Css.transparent),
            /* :: */[
              Css.hover(/* :: */[
                    Css.color(Css.black),
                    /* [] */0
                  ]),
              /* [] */0
            ]
          ]
        ]
      ]
    ]);

var zoom = Css.style(/* :: */[
      Css.left(Css.em(2)),
      /* :: */[
        Css.backgroundColor(Css.hex("00d742")),
        /* :: */[
          Css.borderColor(Css.hex("049931")),
          /* :: */[
            Css.color(Css.transparent),
            /* :: */[
              Css.hover(/* :: */[
                    Css.color(Css.black),
                    /* [] */0
                  ]),
              /* [] */0
            ]
          ]
        ]
      ]
    ]);

var quit = Css.style(/* :: */[
      Css.left(Css.em(2)),
      /* :: */[
        Css.backgroundColor(Css.hex("red")),
        /* :: */[
          Css.borderColor(Css.hex("049931")),
          /* :: */[
            Css.color(Css.transparent),
            /* :: */[
              Css.hover(/* :: */[
                    Css.color(Css.black),
                    /* [] */0
                  ]),
              /* [] */0
            ]
          ]
        ]
      ]
    ]);

var input = Css.style(/* :: */[
      Css.borderWidth(Css.zero),
      /* :: */[
        Css.fontSize(Css.em(1)),
        /* :: */[
          Css.backgroundColor(/* transparent */582626130),
          /* :: */[
            Css.color(Css.white),
            /* :: */[
              Css.outlineStyle(Css.none),
              /* [] */0
            ]
          ]
        ]
      ]
    ]);

var Styles = /* module */[
  /* container */container,
  /* header */header,
  /* content */content,
  /* buttonContainer */buttonContainer,
  /* buttons */buttons,
  /* minimize */minimize,
  /* zoom */zoom,
  /* quit */quit,
  /* input */input
];

var component = ReasonReact.reducerComponent("Terminal");

function make() {
  var updateHistory = function (id, history, text) {
    return List.map((function (prompt) {
                  var match = +(prompt[/* id */1] === id);
                  if (match !== 0) {
                    return /* record */[
                            /* text */text,
                            /* id */prompt[/* id */1]
                          ];
                  } else {
                    return prompt;
                  }
                }), history);
  };
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      return React.createElement("div", {
                  className: container,
                  onKeyDown: (function ($$event) {
                      return Curry._1(self[/* send */4], /* KeyDown */Block.__(1, [$$event.which]));
                    })
                }, React.createElement("header", {
                      className: header
                    }, React.createElement("div", {
                          className: buttonContainer
                        }, React.createElement("button", {
                              className: CommonStyles$Portfolio.combineClasses(/* :: */[
                                    quit,
                                    /* :: */[
                                      buttons,
                                      /* [] */0
                                    ]
                                  ])
                            }, Utils$Portfolio.str("x")), React.createElement("button", {
                              className: CommonStyles$Portfolio.combineClasses(/* :: */[
                                    minimize,
                                    /* :: */[
                                      buttons,
                                      /* [] */0
                                    ]
                                  ])
                            }, Utils$Portfolio.str("-")), React.createElement("button", {
                              className: CommonStyles$Portfolio.combineClasses(/* :: */[
                                    zoom,
                                    /* :: */[
                                      buttons,
                                      /* [] */0
                                    ]
                                  ])
                            }, Utils$Portfolio.str("+"))), Utils$Portfolio.str("Bash")), React.createElement("div", {
                      className: content
                    }, $$Array.of_list(List.rev(List.map((function (prompt) {
                                    return React.createElement("div", undefined, Utils$Portfolio.str(Shell$Portfolio.showPrompt(/* () */0)), React.createElement("input", {
                                                    className: input,
                                                    id: String(prompt[/* id */1]),
                                                    value: prompt[/* text */0],
                                                    onChange: (function (evt) {
                                                        var $$event = evt;
                                                        var self$1 = self;
                                                        var text = Utils$Portfolio.getText($$event);
                                                        return Curry._1(self$1[/* send */4], /* Change */Block.__(0, [text]));
                                                      })
                                                  }));
                                  }), self[/* state */2][/* history */0])))));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* history : :: */[
                /* record */[
                  /* text */"",
                  /* id */1
                ],
                /* [] */0
              ],
              /* currentId */1
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (action.tag) {
        var match = +(action[0] === 13);
        if (match !== 0) {
          return /* Update */Block.__(0, [/* record */[
                      /* history : :: */[
                        /* record */[
                          /* text */"",
                          /* id */state[/* currentId */1] + 1 | 0
                        ],
                        state[/* history */0]
                      ],
                      /* currentId */state[/* currentId */1]
                    ]]);
        } else {
          return /* NoUpdate */0;
        }
      } else {
        return /* Update */Block.__(0, [/* record */[
                    /* history */updateHistory(state[/* currentId */1], state[/* history */0], action[0]),
                    /* currentId */state[/* currentId */1]
                  ]]);
      }
    });
  return newrecord;
}

exports.Styles = Styles;
exports.component = component;
exports.make = make;
/* container Not a pure module */
